{"version":3,"file":"splide-renderer.min.js","sources":["../../src/js/constants/directions.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/arrows.ts","../../src/js/constants/project.ts","../../src/js/constants/classes.ts","../../src/js/constants/defaults.ts","../../src/js/constants/i18n.ts","../../src/js/utils/arrayLike/slice/slice.ts","../../src/js/utils/function/apply/apply.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/array/forEach/forEach.ts","../../src/js/utils/array/push/push.ts","../../src/js/utils/dom/matches/matches.ts","../../src/js/utils/dom/child/child.ts","../../src/js/utils/dom/children/children.ts","../../src/js/utils/object/ownKeys/ownKeys.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/object/merge/merge.ts","../../src/js/utils/dom/remove/remove.ts","../../src/js/utils/dom/unit/unit.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/utils/math/math/math.ts","../../src/js/utils/string/camelToKebab/camelToKebab.ts","../../src/js/utils/string/uniqueId/uniqueId.ts","../../src/js/constructors/EventBinder/EventBinder.ts","../../src/js/utils/array/empty/empty.ts","../../src/js/constructors/EventInterface/EventInterface.ts","../../src/js/constants/events.ts","../../src/js/renderer/constants/defaults.ts","../../src/js/renderer/Style/Style.ts","../../src/js/renderer/SplideRenderer/SplideRenderer.ts","../../src/js/utils/string/pad/pad.ts","../../src/js/utils/dom/queryAll/queryAll.ts","../../src/js/constants/types.ts","../../src/js/renderer/constants/classes.ts","../../src/js/components/Arrows/path.ts"],"sourcesContent":["/**\r\n * Enumerates slides from left to right.\r\n */\r\nexport const LTR = 'ltr';\r\n\r\n/**\r\n * Enumerates slides from right to left.\r\n */\r\nexport const RTL = 'rtl';\r\n\r\n/**\r\n * Enumerates slides in a col.\r\n */\r\nexport const TTB = 'ttb';\r\n","import { ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, ARROW_UP } from '../../constants/arrows';\r\nimport { RTL, TTB } from '../../constants/directions';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\n\r\n\r\n/**\r\n * The interface for the Direction component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DirectionComponent extends BaseComponent {\r\n  resolve( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): string;\r\n  orient( value: number ): number;\r\n}\r\n\r\n/**\r\n * The translation map for directions.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ORIENTATION_MAP = {\r\n  width     : [ 'height' ],\r\n  left      : [ 'top', 'right' ],\r\n  right     : [ 'bottom', 'left' ],\r\n  x         : [ 'y' ],\r\n  X         : [ 'Y' ],\r\n  Y         : [ 'X' ],\r\n  ArrowLeft : [ ARROW_UP, ARROW_RIGHT ],\r\n  ArrowRight: [ ARROW_DOWN, ARROW_LEFT ],\r\n};\r\n\r\n/**\r\n * The component that absorbs the difference among directions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Direction component object.\r\n */\r\nexport function Direction( Splide: Splide, Components: Components, options: Options ): DirectionComponent {\r\n  /**\r\n   * Resolves the provided property name.\r\n   *\r\n   * @param prop      - A property name to translate.\r\n   * @param axisOnly  - Optional. If `ture`, returns the same property for LTR and RTL.\r\n   * @param direction - Optional. Specify the direction. The default value is the `direction` option.\r\n   */\r\n  function resolve( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): string {\r\n    direction = direction || options.direction;\r\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\r\n\r\n    return ORIENTATION_MAP[ prop ] && ORIENTATION_MAP[ prop ][ index ]\r\n      || prop.replace( /width|left|right/i, ( match, offset ) => {\r\n        const replacement = ORIENTATION_MAP[ match.toLowerCase() ][ index ] || match;\r\n        return offset > 0 ? replacement.charAt( 0 ).toUpperCase() + replacement.slice( 1 ) : replacement;\r\n      } );\r\n  }\r\n\r\n  /**\r\n   * Orients the value towards the current direction.\r\n   *\r\n   * @param value - A value to orient.\r\n   *\r\n   * @return The oriented value.\r\n   */\r\n  function orient( value: number ): number {\r\n    return value * ( options.direction === RTL ? 1 : -1 );\r\n  }\r\n\r\n  return {\r\n    resolve,\r\n    orient,\r\n  };\r\n}\r\n","const ARROW = 'Arrow';\r\nexport const ARROW_LEFT  = `${ ARROW }Left`;\r\nexport const ARROW_RIGHT = `${ ARROW }Right`;\r\nexport const ARROW_UP    = `${ ARROW }Up`;\r\nexport const ARROW_DOWN  = `${ ARROW }Down`;","/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const PROJECT_CODE = 'splide';\r\n\r\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\r\n","import { PROJECT_CODE } from './project';\r\n\r\n\r\nexport const CLASS_ROOT            = PROJECT_CODE;\r\nexport const CLASS_TRACK           = `${ PROJECT_CODE }__track`;\r\nexport const CLASS_LIST            = `${ PROJECT_CODE }__list`;\r\nexport const CLASS_SLIDE           = `${ PROJECT_CODE }__slide`;\r\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\r\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\r\nexport const CLASS_ARROWS          = `${ PROJECT_CODE }__arrows`;\r\nexport const CLASS_ARROW           = `${ PROJECT_CODE }__arrow`;\r\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\r\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\r\nexport const CLASS_PAGINATION      = `${ PROJECT_CODE }__pagination`;\r\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\r\nexport const CLASS_PROGRESS        = `${ PROJECT_CODE }__progress`;\r\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\r\nexport const CLASS_TOGGLE          = `${ PROJECT_CODE }__toggle`;\r\nexport const CLASS_TOGGLE_PLAY     = `${ CLASS_TOGGLE }__play`;\r\nexport const CLASS_TOGGLE_PAUSE    = `${ CLASS_TOGGLE }__pause`;\r\nexport const CLASS_SPINNER         = `${ PROJECT_CODE }__spinner`;\r\nexport const CLASS_SR              = `${ PROJECT_CODE }__sr`;\r\nexport const CLASS_INITIALIZED     = 'is-initialized';\r\nexport const CLASS_ACTIVE          = 'is-active';\r\nexport const CLASS_PREV            = 'is-prev';\r\nexport const CLASS_NEXT            = 'is-next';\r\nexport const CLASS_VISIBLE         = 'is-visible';\r\nexport const CLASS_LOADING         = 'is-loading';\r\nexport const CLASS_FOCUS_IN        = 'is-focus-in';\r\n\r\n\r\n/**\r\n * The array with all status classes.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATUS_CLASSES = [\r\n  CLASS_ACTIVE,\r\n  CLASS_VISIBLE,\r\n  CLASS_PREV,\r\n  CLASS_NEXT,\r\n  CLASS_LOADING,\r\n  CLASS_FOCUS_IN,\r\n];\r\n\r\n/**\r\n * The collection of classes for elements that Splide dynamically creates.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const CLASSES = {\r\n  slide     : CLASS_SLIDE,\r\n  clone     : CLASS_CLONE,\r\n  arrows    : CLASS_ARROWS,\r\n  arrow     : CLASS_ARROW,\r\n  prev      : CLASS_ARROW_PREV,\r\n  next      : CLASS_ARROW_NEXT,\r\n  pagination: CLASS_PAGINATION,\r\n  page      : CLASS_PAGINATION_PAGE,\r\n  spinner   : CLASS_SPINNER,\r\n};\r\n","import { Options } from '../types';\r\nimport { CLASSES } from './classes';\r\nimport { I18N } from './i18n';\r\n\r\n\r\n/**\r\n * The collection of default options.\r\n * Note that this collection does not contain all options.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULTS: Options = {\r\n  type              : 'slide',\r\n  role              : 'region',\r\n  speed             : 400,\r\n  perPage           : 1,\r\n  cloneStatus       : true,\r\n  arrows            : true,\r\n  pagination        : true,\r\n  paginationKeyboard: true,\r\n  interval          : 5000,\r\n  pauseOnHover      : true,\r\n  pauseOnFocus      : true,\r\n  resetProgress     : true,\r\n  easing            : 'cubic-bezier(0.25, 1, 0.5, 1)',\r\n  drag              : true,\r\n  direction         : 'ltr',\r\n  trimSpace         : true,\r\n  focusableNodes    : 'a, button, textarea, input, select, iframe',\r\n  live              : true,\r\n  classes           : CLASSES,\r\n  i18n              : I18N,\r\n  reducedMotion: {\r\n    speed      : 0,\r\n    rewindSpeed: 0,\r\n    autoplay   : 'pause',\r\n  },\r\n};","/**\r\n * The collection of i18n strings.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const I18N = {\r\n  prev      : 'Previous slide',\r\n  next      : 'Next slide',\r\n  first     : 'Go to first slide',\r\n  last      : 'Go to last slide',\r\n  slideX    : 'Go to slide %s',\r\n  pageX     : 'Go to page %s',\r\n  play      : 'Start autoplay',\r\n  pause     : 'Pause autoplay',\r\n  carousel  : 'carousel',\r\n  slide     : 'slide',\r\n  select    : 'Select a slide to show',\r\n  slideLabel: '%s of %s', // [ slide number ] / [ slide size ]\r\n};\r\n","/**\r\n * The slice method for an array-like object.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param start     - Optional. A start index.\r\n * @param end       - Optional. A end index.\r\n *\r\n * @return An array with sliced elements.\r\n */\r\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\r\n  return Array.prototype.slice.call( arrayLike, start, end );\r\n}\r\n","import { AnyFunction, ShiftN } from '../../../types';\r\nimport { slice } from '../../arrayLike';\r\n\r\n\r\n/**\r\n * Create a function where provided arguments are bound.\r\n * `this` parameter will be always null.\r\n *\r\n * @param func - A function.\r\n * @param args - Arguments to bind to the function.\r\n *\r\n * @return A function where arguments are bound.\r\n */\r\nexport function apply<F extends AnyFunction, A extends any[] = any[]>(\r\n  func: F,\r\n  ...args: A\r\n): ( ...args: ShiftN<Parameters<F>, A[\"length\"]> ) => ReturnType<F>;\r\n\r\n/**\r\n * Create a function where provided arguments are bound.\r\n * `this` parameter will be always null.\r\n *\r\n * @param func - A function.\r\n */\r\nexport function apply( func: AnyFunction ): any {\r\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n  return func.bind( null, ...slice( arguments, 1 ) );\r\n}\r\n","import { AnyFunction } from '../../types';\r\nimport { apply } from '../function';\r\n\r\n\r\n/**\r\n * The alias of the type check function.\r\n *\r\n * @param type    - A type.\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is the specified type.\r\n */\r\nfunction typeOf( type: string, subject: unknown ): boolean {\r\n  return typeof subject === type;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\r\nexport function isObject( subject: unknown ): subject is object {\r\n  return ! isNull( subject ) && typeOf( 'object', subject );\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\r\nexport const isArray: <T>( subject: unknown ) => subject is T[] = Array.isArray;\r\n\r\n/**\r\n * Checks if the given subject is a function or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a function, or otherwise `false`.\r\n */\r\nexport const isFunction = <( subject: unknown ) => subject is AnyFunction>apply( typeOf, 'function' );\r\n\r\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\r\nexport const isString = <( subject: unknown ) => subject is string>apply( typeOf, 'string' );\r\n\r\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\r\nexport const isUndefined = <( subject: unknown ) => subject is undefined>apply( typeOf, 'undefined' );\r\n\r\n/**\r\n * Checks if the given subject is `null` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `null`, or otherwise `false`.\r\n */\r\nexport function isNull( subject: unknown ): subject is null {\r\n  return subject === null;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an HTMLElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\r\n */\r\nexport function isHTMLElement( subject: unknown ): subject is HTMLElement {\r\n  return subject instanceof HTMLElement;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an HTMLButtonElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLButtonElement, or otherwise `false`.\r\n */\r\nexport function isHTMLButtonElement( subject: unknown ): subject is HTMLButtonElement {\r\n  return subject instanceof HTMLButtonElement;\r\n}\r\n","import { isArray } from '../../type/type';\r\n\r\n\r\n/**\r\n * Push the provided value to an array if the value is not an array.\r\n *\r\n * @param value - A value to push.\r\n *\r\n * @return An array containing the value, or the value itself if it is already an array.\r\n */\r\nexport function toArray<T>( value: T | T[] ): T[] {\r\n  return isArray( value ) ? value : [ value ];\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * The extended `Array#forEach` method that accepts a single value as an argument.\r\n *\r\n * @param values   - A value or values to iterate over.\r\n * @param iteratee - An iteratee function.\r\n */\r\nexport function forEach<T>( values: T | T[], iteratee: ( value: T, index: number, array: T[] ) => void ): void {\r\n  toArray( values ).forEach( iteratee );\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * Extended `Array#push()` that accepts an item or an array with items.\r\n *\r\n * @param array - An array to push items.\r\n * @param items - An item or items to push.\r\n *\r\n * @return A provided array itself.\r\n */\r\nexport function push<T>( array: T[], items: T | T[] ): T[] {\r\n  array.push( ...toArray( items ) );\r\n  return array;\r\n}\r\n","import { isHTMLElement } from '../../type/type';\r\n\r\n\r\n/**\r\n * Checks if the element can be selected by the provided selector or not.\r\n *\r\n * @param elm      - An element to check.\r\n * @param selector - A selector to test.\r\n *\r\n * @return `true` if the selector matches the element, or otherwise `false`.\r\n */\r\nexport function matches( elm: Element | EventTarget, selector: string ): boolean {\r\n  return isHTMLElement( elm ) && ( elm[ 'msMatchesSelector' ] || elm.matches ).call( elm, selector );\r\n}\r\n","import { children } from '../children/children';\r\n\r\n\r\n/**\r\n * Returns a child element that matches the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - A selector to filter children.\r\n *\r\n * @return A matched child element if available, or otherwise `undefined`.\r\n */\r\nexport function child<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E | undefined {\r\n  return selector ? children<E>( parent, selector )[ 0 ] : parent.firstElementChild as E;\r\n}\r\n","import { slice } from '../../arrayLike';\r\nimport { matches } from '../matches/matches';\r\n\r\n\r\n/**\r\n * Finds children that has the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - Optional. A selector to filter children.\r\n *\r\n * @return An array with filtered children.\r\n */\r\nexport function children<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E[] {\r\n  const children = parent ? slice( parent.children ) as E[] : [];\r\n  return selector ? children.filter( child => matches( child, selector ) ) : children;\r\n}\r\n","/**\r\n * An alias of Object.keys\r\n */\r\nexport const ownKeys = Object.keys;","import { ownKeys } from '../ownKeys/ownKeys';\r\n\r\n\r\n/**\r\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\r\n *\r\n * @param object   - An object to iterate over.\r\n * @param iteratee - An iteratee function that takes the value and key as arguments.\r\n * @param right    - If `true`, the method iterates over the object from the end like `forEachRight()`.\r\n *\r\n * @return A provided object itself.\r\n */\r\nexport function forOwn<T extends object>(\r\n  object: T,\r\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void,\r\n  right?: boolean\r\n): T {\r\n  if ( object ) {\r\n    let keys = ownKeys( object );\r\n    keys = right ? keys.reverse() : keys;\r\n\r\n    for ( let i = 0; i < keys.length; i++ ) {\r\n      const key = keys[ i ];\r\n\r\n      if ( key !== '__proto__' ) {\r\n        if ( iteratee( object[ key ], key ) === false ) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return object;\r\n}\r\n","import { Cast, Head, Push, Resolve, Shift } from '../../../types';\r\nimport { slice } from '../../arrayLike';\r\nimport { forOwn } from '../forOwn/forOwn';\r\n\r\n\r\n/**\r\n * Assigns U to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - An object to assign.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Assign<T, U> = Omit<T, keyof U> & U;\r\n\r\n/**\r\n * Recursively assigns U[] to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - A tuple contains objects.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Assigned<T extends object, U extends object[], N extends number, C extends any[] = []> = {\r\n  0: T,\r\n  1: Assigned<Assign<T, Head<U>>, Shift<U>, N, Push<C>>,\r\n}[ C['length'] extends N ? 0 : 1 ] extends infer A ? Cast<A, any> : never;\r\n\r\nexport function assign<T extends object>( object: T ): T;\r\n\r\nexport function assign<T extends object, U extends object[]>(\r\n  object: T,\r\n  ...sources: U\r\n): Resolve<Assigned<T, U, U['length']>>\r\n\r\n/**\r\n * Assigns all own enumerable properties of all source objects to the provided object.\r\n * `undefined` in source objects will be skipped.\r\n *\r\n * @param object - An object to assign properties to.\r\n *\r\n * @return An object assigned properties of the sources to.\r\n */\r\nexport function assign<T extends object>( object: T ): any {\r\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n  slice( arguments, 1 ).forEach( source => {\r\n    forOwn( source, ( value, key ) => {\r\n      object[ key ] = source[ key ];\r\n    } );\r\n  } );\r\n\r\n  return object;\r\n}\r\n","import { Cast, Head, Push, Resolve, Shift } from '../../../types';\r\nimport { slice } from '../../arrayLike';\r\nimport { isArray, isObject } from '../../type/type';\r\nimport { forOwn } from '../forOwn/forOwn';\r\n\r\n\r\n/**\r\n * Merges U to T.\r\n *\r\n * @typeParam T - An object to merge U into.\r\n * @typeParam U - An object to merge properties from.\r\n *\r\n * @return A merged object type.\r\n */\r\nexport type Merge<T extends object, U extends object> = Omit<T, keyof U> & {\r\n  [ K in ( keyof T & keyof U ) ]: U[ K ] extends object\r\n    ? U[ K ] extends any[]\r\n      ? U[ K ]\r\n      : T[ K ] extends object\r\n        ? Merge<T[ K ], U[ K ]> extends infer A ? Resolve<Cast<A, object>> : never\r\n        : U[ K ]\r\n    : U[ K ];\r\n} & Omit<U, keyof T>;\r\n\r\n/**\r\n * Recursively merges U[] to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - A tuple contains objects.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Merged<T extends object, U extends object[], N extends number, C extends any[] = []> = {\r\n  0: T,\r\n  1: Merged<Merge<T, Head<U>>, Shift<U>, N, Push<C>>,\r\n}[ C['length'] extends N ? 0 : 1 ] extends infer A ? Cast<A, any> : never;\r\n\r\nexport function merge<T extends object>( object: T ): T;\r\n\r\nexport function merge<T extends object, U extends object[]>(\r\n  object: T,\r\n  ...sources: U\r\n): Resolve<Merged<T, U, U['length']>>\r\n\r\n/**\r\n * Recursively merges source properties to the object.\r\n * Be aware that this method does not merge arrays. They are just duplicated by `slice()`.\r\n *\r\n * @param object - An object to merge properties to.\r\n *\r\n * @return A new object with merged properties.\r\n */\r\nexport function merge<T extends object>( object: T ): any {\r\n  // eslint-disable-next-line prefer-rest-params\r\n  slice( arguments, 1 ).forEach( source => {\r\n    forOwn( source, ( value, key ) => {\r\n      if ( isArray( value ) ) {\r\n        object[ key ] = value.slice();\r\n      } else if ( isObject( value ) ) {\r\n        object[ key ] = merge( {}, isObject( object[ key ] ) ? object[ key ] : {}, value );\r\n      } else {\r\n        object[ key ] = value;\r\n      }\r\n    } );\r\n  } );\r\n\r\n  return object;\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Removes the provided node from its parent.\r\n *\r\n * @param nodes - A node or nodes to remove.\r\n */\r\nexport function remove( nodes: Node | Node[] ): void {\r\n  forEach( nodes, node => {\r\n    if ( node && node.parentNode ) {\r\n      node.parentNode.removeChild( node );\r\n    }\r\n  } );\r\n}\r\n","import { isString } from '../../type/type';\r\n\r\n\r\n/**\r\n * Appends `px` to the provided number.\r\n * If the value is already string, just returns it.\r\n *\r\n * @param value - A value to append `px` to.\r\n *\r\n * @return A string with the CSS unit.\r\n */\r\nexport function unit( value: number | string ): string {\r\n  return isString( value ) ? value : value ? `${ value }px` : '';\r\n}\r\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message?: string ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message || '' }` );\r\n  }\r\n}\r\n","export const { min, max, floor, ceil, abs } = Math;\r\n","/**\r\n * Converts the provided string in the camel case to the kebab case.\r\n *\r\n * @param string - A string to convert.\r\n */\r\nexport function camelToKebab( string: string ): string {\r\n  return string.replace( /([a-z0-9])([A-Z])/g, '$1-$2' ).toLowerCase();\r\n}\r\n","import { pad } from '../pad/pad';\r\n\r\n\r\n/**\r\n * Stores unique IDs.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst ids: Record<string, number> = {};\r\n\r\n/**\r\n * Returns a sequential unique ID as \"{ prefix }-{ number }\".\r\n *\r\n * @param prefix - A prefix for the ID.\r\n */\r\nexport function uniqueId( prefix: string ): string {\r\n  return `${ prefix }${ pad( ( ids[ prefix ] = ( ids[ prefix ] || 0 ) + 1 ) ) }`;\r\n}\r\n","import { AnyFunction } from '../../types';\r\nimport { empty, forEach } from '../../utils';\r\n\r\n\r\n/**\r\n * The type for an EventTarget or an array with EventTarget objects.\r\n *\r\n * @since 4.0.0\r\n */\r\ntype EventTargets = EventTarget | EventTarget[];\r\n\r\n/**\r\n * The interface for the EventBinder object.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface EventBinderObject {\r\n  bind( target: EventTargets, events: string | string[], callback: AnyFunction, options?: AddEventListenerOptions ): void\r\n  unbind( target: EventTarget | EventTarget[], events: string | string[], callback?: AnyFunction ): void;\r\n  dispatch<T>( target: EventTarget, event: string, detail?: T ): void;\r\n  destroy(): void;\r\n}\r\n\r\n/**\r\n * The constructor function to provide methods to subscribe native events.\r\n *\r\n * @since 4.0.0\r\n * @constructor\r\n *\r\n * @return An EventBinder object.\r\n */\r\nexport function EventBinder(): EventBinderObject {\r\n  /**\r\n   * Stores all handlers that listen to native events.\r\n   * `[ target, event, namespace, callback, remover ]`\r\n   */\r\n  let listeners: [ EventTarget, string, string | undefined, AnyFunction, () => void ][] = [];\r\n\r\n  /**\r\n   * Listens to native events.\r\n   * - `destroy()` can unsubscribe all events.\r\n   * - In IE, mediaQueryList does not inherit EventTarget,\r\n   *   and only supports deprecated `addListener` and `removeListener`.\r\n   *\r\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener\r\n   *\r\n   * @param targets  - A target element, the window object or the document object.\r\n   * @param events   - An event or events to listen to.\r\n   * @param callback - A callback function.\r\n   * @param options  - Optional. The options to pass to the `addEventListener` function.\r\n   */\r\n  function bind(\r\n    targets: EventTargets,\r\n    events: string | string[],\r\n    callback: AnyFunction,\r\n    options?: AddEventListenerOptions\r\n  ): void {\r\n    forEachEvent( targets, events, ( target, event, namespace ) => {\r\n      const isEventTarget = 'addEventListener' in target;\r\n      const remover = isEventTarget\r\n        ? target.removeEventListener.bind( target, event, callback, options )\r\n        : target[ 'removeListener' ].bind( target, callback );\r\n\r\n      isEventTarget ? target.addEventListener( event, callback, options ) : target[ 'addListener' ]( callback );\r\n      listeners.push( [ target, event, namespace, callback, remover ] );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Removes the event handler.\r\n   *\r\n   * @param targets  - A target element, the window object or the document object.\r\n   * @param events   - An event name or names to remove.\r\n   * @param callback - Optional. Specify the callback to remove.\r\n   */\r\n  function unbind( targets: EventTargets, events: string | string[], callback?: AnyFunction ): void {\r\n    forEachEvent( targets, events, ( target, event, namespace ) => {\r\n      listeners = listeners.filter( listener => {\r\n        if ( listener[ 0 ] === target\r\n          && listener[ 1 ] === event\r\n          && listener[ 2 ] === namespace\r\n          && ( ! callback || listener[ 3 ] === callback )\r\n        ) {\r\n          listener[ 4 ]();\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Dispatches a custom event of the target.\r\n   *\r\n   * @param target - An event target.\r\n   * @param type   - An event type.\r\n   * @param detail - Optional. The `detail` object of the event.\r\n   *\r\n   * @return An event object.\r\n   */\r\n  function dispatch<T>( target: EventTarget, type: string, detail?: T ): CustomEvent {\r\n    let e: CustomEvent;\r\n    const bubbles = true;\r\n\r\n    if ( typeof CustomEvent === 'function' ) {\r\n      e = new CustomEvent( type, { bubbles, detail } );\r\n    } else {\r\n      e = document.createEvent( 'CustomEvent' );\r\n      e.initCustomEvent( type, bubbles, false, detail );\r\n    }\r\n\r\n    target.dispatchEvent( e );\r\n    return e;\r\n  }\r\n\r\n  /**\r\n   * Iterates over each target and event.\r\n   *\r\n   * @param targets  - A target element, the window object or the document object.\r\n   * @param events   - An event name or names.\r\n   * @param iteratee - An iteratee function.\r\n   */\r\n  function forEachEvent(\r\n    targets: EventTargets,\r\n    events: string | string[],\r\n    iteratee: ( target: EventTarget, event: string, namespace: string | undefined ) => void\r\n  ): void {\r\n    forEach( targets, target => {\r\n      target && forEach( events, events => {\r\n        events.split( ' ' ).forEach( eventNS => {\r\n          const fragment = eventNS.split( '.' );\r\n          iteratee( target, fragment[ 0 ], fragment[ 1 ] );\r\n        } );\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Removes all listeners.\r\n   */\r\n  function destroy(): void {\r\n    listeners.forEach( data => { data[ 4 ]() } );\r\n    empty( listeners );\r\n  }\r\n\r\n  return {\r\n    bind,\r\n    unbind,\r\n    dispatch,\r\n    destroy,\r\n  };\r\n}\r\n","/**\r\n * Empties the array.\r\n *\r\n * @param array - A array to empty.\r\n */\r\nexport function empty( array: any[] ): void {\r\n  array.length = 0;\r\n}\r\n","import { EVENT_DESTROY } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, EventMap } from '../../types';\r\nimport { apply, assign, isArray, slice, toArray } from '../../utils';\r\nimport { EventBinder, EventBinderObject } from '../EventBinder/EventBinder';\r\n\r\n\r\n/**\r\n * The interface for the EventInterface object.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface EventInterfaceObject extends EventBinderObject {\r\n  on<K extends keyof EventMap>( event: K, callback: EventMap[ K ] ): void;\r\n  on( events: string | string[], callback: AnyFunction ): void;\r\n  off<K extends keyof EventMap>( events: K | K[] | string | string[] ): void;\r\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): void\r\n  emit( event: string, ...args: any[] ): void;\r\n\r\n  /** @internal */\r\n  bus: DocumentFragment;\r\n}\r\n\r\n/**\r\n * The constructor function that provides interface for internal and native events.\r\n *\r\n * @since 3.0.0\r\n * @constructor\r\n *\r\n * @param Splide - A Splide instance.\r\n *\r\n * @return A collection of interface functions.\r\n */\r\nexport function EventInterface( Splide?: Splide ): EventInterfaceObject {\r\n  /**\r\n   * The document fragment for internal events.\r\n   * Provide the Splide instance to share the bus.\r\n   */\r\n  const bus = Splide ? Splide.event.bus : document.createDocumentFragment();\r\n\r\n  /**\r\n   * An event binder object.\r\n   */\r\n  const binder = EventBinder();\r\n\r\n  /**\r\n   * Listens to an internal event or events.\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\r\n   * @param callback - A callback function to register.\r\n   */\r\n  function on( events: string | string[], callback: AnyFunction ): void {\r\n    binder.bind( bus, toArray( events ).join( ' ' ), e => {\r\n      callback.apply( callback, isArray( e.detail ) ? e.detail : [] );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Triggers callback functions.\r\n   * This accepts additional arguments and passes them to callbacks.\r\n   *\r\n   * @param event - An event name.\r\n   */\r\n  function emit( event: string ): void {\r\n    // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n    binder.dispatch( bus, event, slice( arguments, 1 ) );\r\n  }\r\n\r\n  if ( Splide ) {\r\n    Splide.event.on( EVENT_DESTROY, binder.destroy );\r\n  }\r\n\r\n  return assign( binder, {\r\n    bus,\r\n    on,\r\n    off: apply( binder.unbind, bus ),\r\n    emit,\r\n  } );\r\n}","export const EVENT_MOUNTED            = 'mounted';\r\nexport const EVENT_READY              = 'ready';\r\nexport const EVENT_MOVE               = 'move';\r\nexport const EVENT_MOVED              = 'moved';\r\nexport const EVENT_SHIFTED            = 'shifted';\r\nexport const EVENT_CLICK              = 'click';\r\nexport const EVENT_ACTIVE             = 'active';\r\nexport const EVENT_INACTIVE           = 'inactive';\r\nexport const EVENT_VISIBLE            = 'visible';\r\nexport const EVENT_HIDDEN             = 'hidden';\r\nexport const EVENT_SLIDE_KEYDOWN      = 'slide:keydown';\r\nexport const EVENT_REFRESH            = 'refresh';\r\nexport const EVENT_UPDATED            = 'updated';\r\nexport const EVENT_RESIZE             = 'resize';\r\nexport const EVENT_RESIZED            = 'resized';\r\nexport const EVENT_DRAG               = 'drag';\r\nexport const EVENT_DRAGGING           = 'dragging';\r\nexport const EVENT_DRAGGED            = 'dragged';\r\nexport const EVENT_SCROLL             = 'scroll';\r\nexport const EVENT_SCROLLED           = 'scrolled';\r\nexport const EVENT_DESTROY            = 'destroy';\r\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\r\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\r\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\r\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\r\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\r\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\r\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\r\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\r\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\r\n\r\n","import { RendererConfig } from '../types/types';\r\n\r\n\r\n/**\r\n * Default options for generating static HTML.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const RENDERER_DEFAULT_CONFIG: RendererConfig = {\r\n  listTag : 'ul',\r\n  slideTag: 'li',\r\n};\r\n","import { Options } from '../../types';\r\nimport { forOwn } from '../../utils';\r\n\r\n\r\ninterface Styles {\r\n  [ breakpoint: string ]: {\r\n    [ selector: string ]: Record<string, string | number>\r\n  };\r\n}\r\n\r\n/**\r\n * The class for generating styles as a string.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class Style {\r\n  /**\r\n   * The collection of registered styles categorized by each breakpoint.\r\n   */\r\n  private readonly styles: Styles = {};\r\n\r\n  /**\r\n   * The ID of the slider.\r\n   */\r\n  private readonly id: string;\r\n\r\n  /**\r\n   * Holds options.\r\n   */\r\n  private readonly options: Options;\r\n\r\n  /**\r\n   * The Style constructor.\r\n   *\r\n   * @param id      - A slider ID.\r\n   * @param options - Options.\r\n   */\r\n  constructor( id: string, options: Options ) {\r\n    this.id      = id;\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * Registers a CSS rule.\r\n   *\r\n   * @param selector - A selector.\r\n   * @param prop\r\n   * @param value\r\n   * @param breakpoint\r\n   */\r\n  rule( selector: string, prop: string, value: string | number, breakpoint?: string ): void {\r\n    breakpoint = breakpoint || 'default';\r\n    const selectors = ( this.styles[ breakpoint ] = this.styles[ breakpoint ] || {} );\r\n    const styles    = ( selectors[ selector ] = selectors[ selector ] || {} );\r\n    styles[ prop ] = value;\r\n  }\r\n\r\n  /**\r\n   * Builds styles as a single string.\r\n   *\r\n   * @return Built styles.\r\n   */\r\n  build(): string {\r\n    let css = '';\r\n\r\n    if ( this.styles.default ) {\r\n      css += this.buildSelectors( this.styles.default );\r\n    }\r\n\r\n    Object.keys( this.styles )\r\n      .sort( ( n, m ) => this.options.mediaQuery === 'min' ? +n - +m : +m - +n )\r\n      .forEach( breakpoint => {\r\n        if ( breakpoint !== 'default' ) {\r\n          css += `@media screen and (max-width: ${ breakpoint }px) {`;\r\n          css += this.buildSelectors( this.styles[ breakpoint ] );\r\n          css += `}`;\r\n        }\r\n      } );\r\n\r\n    return css;\r\n  }\r\n\r\n  /**\r\n   * Builds styles for each breakpoint.\r\n   *\r\n   * @param selectors - An object with styles.\r\n   *\r\n   * @return Built styles.\r\n   */\r\n  private buildSelectors( selectors: Record<string, Record<string, string | number>> ): string {\r\n    let css = '';\r\n\r\n    forOwn( selectors, ( styles, selector ) => {\r\n      selector = `#${ this.id } ${ selector }`.trim();\r\n      css += `${ selector } {`;\r\n\r\n      forOwn( styles, ( value, prop ) => {\r\n        if ( value || value === 0 ) {\r\n          css += `${ prop }: ${ value };`;\r\n        }\r\n      } );\r\n\r\n      css += '}';\r\n    } );\r\n\r\n    return css;\r\n  }\r\n}\r\n","import { PATH, SIZE, XML_NAME_SPACE } from '../../components/Arrows/path';\r\nimport { Direction, DirectionComponent } from '../../components/Direction/Direction';\r\nimport { CLASS_ACTIVE, CLASS_CLONE, CLASS_LIST, CLASS_ROOT, CLASS_SLIDE, CLASS_TRACK } from '../../constants/classes';\r\nimport { DEFAULTS } from '../../constants/defaults';\r\nimport { TTB } from '../../constants/directions';\r\nimport { EVENT_MOUNTED } from '../../constants/events';\r\nimport { LOOP, SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Options } from '../../types';\r\nimport {\r\n  assert,\r\n  assign,\r\n  camelToKebab,\r\n  child,\r\n  forOwn,\r\n  isObject,\r\n  isString,\r\n  max,\r\n  merge,\r\n  push,\r\n  queryAll,\r\n  remove,\r\n  uniqueId,\r\n  unit,\r\n} from '../../utils';\r\nimport { CLASS_RENDERED } from '../constants/classes';\r\nimport { RENDERER_DEFAULT_CONFIG } from '../constants/defaults';\r\nimport { Style } from '../Style/Style';\r\nimport { RendererConfig, SlideContent } from '../types/types';\r\n\r\n\r\n/**\r\n * The class to generate static HTML of the slider for the first view.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class SplideRenderer {\r\n  /**\r\n   * Removes a style element and clones.\r\n   *\r\n   * @param splide - A Splide instance.\r\n   */\r\n  static clean( splide: Splide ): void {\r\n    const { on } = EventInterface( splide );\r\n    const { root } = splide;\r\n    const clones = queryAll( root, `.${ CLASS_CLONE }` );\r\n\r\n    on( EVENT_MOUNTED, () => {\r\n      remove( child( root, 'style' ) );\r\n    } );\r\n\r\n    remove( clones );\r\n  }\r\n\r\n  /**\r\n   * Holds slide contents.\r\n   */\r\n  private readonly contents: string[] | SlideContent[];\r\n\r\n  /**\r\n   * Stores data of slides.\r\n   */\r\n  private readonly slides: SlideContent[] = [];\r\n\r\n  /**\r\n   * The Direction component.\r\n   */\r\n  private readonly Direction: DirectionComponent;\r\n\r\n  /**\r\n   * Holds the Style instance.\r\n   */\r\n  private readonly Style: Style;\r\n\r\n  /**\r\n   * Holds options.\r\n   */\r\n  private readonly options: Options = {};\r\n\r\n  /**\r\n   * Holds options for this instance.\r\n   */\r\n  private readonly config: RendererConfig;\r\n\r\n  /**\r\n   * The slider ID.\r\n   */\r\n  private readonly id: string;\r\n\r\n  /**\r\n   * An array with options for each breakpoint.\r\n   */\r\n  private readonly breakpoints: [ string, Options ][] = [];\r\n\r\n  /**\r\n   * The SplideRenderer constructor.\r\n   *\r\n   * @param contents - An array with slide contents. Each item must be an HTML or a plain text.\r\n   * @param options  - Optional. Slider options.\r\n   * @param config   - Static default options.\r\n   * @param defaults - Default options for the slider. Pass `Splide.defaults` if you are using it.\r\n   */\r\n  constructor( contents: string[] | SlideContent[], options?: Options, config?: RendererConfig, defaults?: Options ) {\r\n    merge( DEFAULTS, defaults || {} );\r\n    merge( merge( this.options, DEFAULTS ), options || {} );\r\n\r\n    this.contents  = contents;\r\n    this.config    = assign( {}, RENDERER_DEFAULT_CONFIG, config || {} );\r\n    this.id        = this.config.id || uniqueId( 'splide' );\r\n    this.Style     = new Style( this.id, this.options );\r\n    this.Direction = Direction( null, null, this.options );\r\n\r\n    assert( this.contents.length, 'Provide at least 1 content.' );\r\n\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   */\r\n  private init(): void {\r\n    this.parseBreakpoints();\r\n    this.initSlides();\r\n    this.registerRootStyles();\r\n    this.registerTrackStyles();\r\n    this.registerSlideStyles();\r\n    this.registerListStyles();\r\n  }\r\n\r\n  /**\r\n   * Initializes slides.\r\n   */\r\n  private initSlides(): void {\r\n    push( this.slides, this.contents.map( ( content, index ) => {\r\n      content = isString( content ) ? { html: content } : content;\r\n      content.styles = content.styles || {};\r\n      content.attrs  = content.attrs || {};\r\n\r\n      this.cover( content );\r\n\r\n      const classes = `${ this.options.classes.slide } ${ index === 0 ? CLASS_ACTIVE : '' }`;\r\n\r\n      assign( content.attrs, {\r\n        class: `${ classes } ${ content.attrs.class || '' }`.trim(),\r\n        style: this.buildStyles( content.styles ),\r\n      } );\r\n\r\n      return content;\r\n    } ) );\r\n\r\n    if ( this.isLoop() ) {\r\n      this.generateClones( this.slides );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers styles for the root element.\r\n   */\r\n  private registerRootStyles(): void {\r\n    this.breakpoints.forEach( ( [ width, options ] ) => {\r\n      this.Style.rule( ' ', 'max-width', unit( options.width ), width );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Registers styles for the track element.\r\n   */\r\n  private registerTrackStyles(): void {\r\n    const { Style } = this;\r\n    const selector = `.${ CLASS_TRACK }`;\r\n\r\n    this.breakpoints.forEach( ( [ width, options ] ) => {\r\n      Style.rule( selector, this.resolve( 'paddingLeft' ), this.cssPadding( options, false ), width );\r\n      Style.rule( selector, this.resolve( 'paddingRight' ), this.cssPadding( options, true ), width );\r\n      Style.rule( selector, 'height', this.cssTrackHeight( options ), width );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Registers styles for the list element.\r\n   */\r\n  private registerListStyles(): void {\r\n    const { Style } = this;\r\n    const selector = `.${ CLASS_LIST }`;\r\n\r\n    this.breakpoints.forEach( ( [ width, options ] ) => {\r\n      Style.rule( selector, 'transform', this.buildTranslate( options ), width );\r\n\r\n      if ( ! this.cssSlideHeight( options ) ) {\r\n        Style.rule( selector, 'aspect-ratio', this.cssAspectRatio( options ), width );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Registers styles for slides and clones.\r\n   */\r\n  private registerSlideStyles(): void {\r\n    const { Style } = this;\r\n    const selector = `.${ CLASS_SLIDE }`;\r\n\r\n    this.breakpoints.forEach( ( [ width, options ] ) => {\r\n      Style.rule( selector, 'width', this.cssSlideWidth( options ), width );\r\n      Style.rule( selector, 'height', this.cssSlideHeight( options ) || '100%', width );\r\n      Style.rule( selector, this.resolve( 'marginRight' ), unit( options.gap ) || '0px', width );\r\n      Style.rule( `${ selector } > img`, 'display', options.cover ? 'none' : 'inline', width );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Builds multiple `translateX` for the list element.\r\n   *\r\n   * @param options - Options for each breakpoint.\r\n   *\r\n   * @return A string with multiple translate functions.\r\n   */\r\n  private buildTranslate( options: Options ): string {\r\n    const { resolve, orient } = this.Direction;\r\n    const values = [];\r\n\r\n    values.push( this.cssOffsetClones( options ) );\r\n    values.push( this.cssOffsetGaps( options ) );\r\n\r\n    if ( this.isCenter( options ) ) {\r\n      values.push( this.buildCssValue( orient( -50 ), '%' ) );\r\n      values.push( ...this.cssOffsetCenter( options ) );\r\n    }\r\n\r\n    return values\r\n      .filter( Boolean )\r\n      .map( value => `translate${ resolve( 'X' ) }(${ value })` )\r\n      .join( ' ' );\r\n  }\r\n\r\n  /**\r\n   * Returns offset for the list element.\r\n   * This does not include gaps because it can not be converted into percent.\r\n   *\r\n   * @param options - Options for each breakpoint.\r\n   *\r\n   * @return The offset.\r\n   */\r\n  private cssOffsetClones( options: Options ): string {\r\n    const { resolve, orient } = this.Direction;\r\n    const cloneCount = this.getCloneCount();\r\n\r\n    if ( this.isFixedWidth( options ) ) {\r\n      const { value, unit } = this.parseCssValue( options[ resolve( 'fixedWidth' ) ] );\r\n      return this.buildCssValue( orient( value ) * cloneCount, unit );\r\n    }\r\n\r\n    const percent = 100 * cloneCount / options.perPage;\r\n    return `${ orient( percent ) }%`;\r\n  }\r\n\r\n  /**\r\n   * Returns offset for centering the active slide.\r\n   *\r\n   * Note:\r\n   * ( 100% + gap ) / perPage - gap\r\n   * 100% / perPage + gap / perPage - gap;\r\n   * 50% / perPage + ( gap / perPage - gap ) / 2;\r\n   *\r\n   * @param options - Options for each breakpoint.\r\n   *\r\n   * @return The offset.\r\n   */\r\n  private cssOffsetCenter( options: Options ): string[] {\r\n    const { resolve, orient } = this.Direction;\r\n\r\n    if ( this.isFixedWidth( options ) ) {\r\n      const { value, unit } = this.parseCssValue( options[ resolve( 'fixedWidth' ) ] );\r\n      return [ this.buildCssValue( orient( value / 2 ), unit ) ];\r\n    }\r\n\r\n    const values = [];\r\n    const { perPage, gap } = options;\r\n\r\n    values.push( `${ orient( 50 / perPage ) }%` );\r\n\r\n    if ( gap ) {\r\n      const { value, unit } = this.parseCssValue( gap );\r\n      const gapOffset = ( value / perPage - value ) / 2;\r\n      values.push( this.buildCssValue( orient( gapOffset ), unit ) );\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * Returns offset for gaps.\r\n   *\r\n   * @param options - Options for each breakpoint.\r\n   *\r\n   * @return The offset as `calc()`.\r\n   */\r\n  private cssOffsetGaps( options: Options ): string {\r\n    const cloneCount = this.getCloneCount();\r\n\r\n    if ( cloneCount && options.gap ) {\r\n      const { orient } = this.Direction;\r\n      const { value, unit } = this.parseCssValue( options.gap );\r\n\r\n      if ( this.isFixedWidth( options ) ) {\r\n        return this.buildCssValue( orient( value * cloneCount ), unit );\r\n      }\r\n\r\n      const { perPage } = options;\r\n      const gaps = cloneCount / perPage;\r\n      return this.buildCssValue( orient( gaps * value ), unit );\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Resolves the prop for the current direction and converts it into the Kebab case.\r\n   *\r\n   * @param prop - A property name to resolve.\r\n   *\r\n   * @return A resolved property name in the Kebab case.\r\n   */\r\n  private resolve( prop: string ): string {\r\n    return camelToKebab( this.Direction.resolve( prop ) );\r\n  }\r\n\r\n  /**\r\n   * Returns padding in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   * @param right   - Determines whether to get padding right or left.\r\n   *\r\n   * @return Padding in the CSS format.\r\n   */\r\n  private cssPadding( options: Options, right: boolean ): string {\r\n    const { padding } = options;\r\n    const prop = this.Direction.resolve( right ? 'right' : 'left', true );\r\n    return padding && unit( padding[ prop ] || ( isObject( padding ) ? 0 : padding ) ) || '0px';\r\n  }\r\n\r\n  /**\r\n   * Returns height of the track element in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Height in the CSS format.\r\n   */\r\n  private cssTrackHeight( options: Options ): string {\r\n    let height = '';\r\n\r\n    if ( this.isVertical() ) {\r\n      height = this.cssHeight( options );\r\n      assert( height, '\"height\" is missing.' );\r\n      height = `calc(${ height } - ${ this.cssPadding( options, false ) } - ${ this.cssPadding( options, true ) })`;\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Returns height provided though options in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Height in the CSS format.\r\n   */\r\n  private cssHeight( options: Options ): string {\r\n    return unit( options.height );\r\n  }\r\n\r\n  /**\r\n   * Returns width of each slide in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Width in the CSS format.\r\n   */\r\n  private cssSlideWidth( options: Options ): string {\r\n    return options.autoWidth\r\n      ? ''\r\n      : unit( options.fixedWidth ) || ( this.isVertical() ? '' : this.cssSlideSize( options ) );\r\n  }\r\n\r\n  /**\r\n   * Returns height of each slide in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Height in the CSS format.\r\n   */\r\n  private cssSlideHeight( options: Options ): string {\r\n    return unit( options.fixedHeight )\r\n      || ( this.isVertical()\r\n        ? ( options.autoHeight ? '' : this.cssSlideSize( options ) )\r\n        : this.cssHeight( options )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Returns width or height of each slide in the CSS format, considering the current direction.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Width or height in the CSS format.\r\n   */\r\n  private cssSlideSize( options: Options ): string {\r\n    const gap = unit( options.gap );\r\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\r\n  }\r\n\r\n  /**\r\n   * Returns the aspectRatio value to simulate the `heightRatio` option.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return aspectRatio in the CSS format.\r\n   */\r\n  private cssAspectRatio( options: Options ): string {\r\n    const { heightRatio } = options;\r\n    return heightRatio ? `${ 1 / heightRatio }` : '';\r\n  }\r\n\r\n  /**\r\n   * Builds the css value by the provided value and unit.\r\n   *\r\n   * @param value - A value.\r\n   * @param unit  - A CSS unit.\r\n   *\r\n   * @return A built value for a CSS value.\r\n   */\r\n  private buildCssValue( value: number, unit: string ): string {\r\n    return `${ value }${ unit }`;\r\n  }\r\n\r\n  /**\r\n   * Parses the CSS value into number and unit.\r\n   *\r\n   * @param value - A value to parse.\r\n   *\r\n   * @return An object with value and unit.\r\n   */\r\n  private parseCssValue( value: string | number ): { value: number, unit: string } {\r\n    if ( isString( value ) ) {\r\n      const number = parseFloat( value ) || 0;\r\n      const unit   = value.replace( /\\d*(\\.\\d*)?/, '' ) || 'px';\r\n      return { value: number, unit };\r\n    }\r\n\r\n    return { value, unit: 'px' };\r\n  }\r\n\r\n  /**\r\n   * Parses breakpoints and generate options for each breakpoint.\r\n   */\r\n  private parseBreakpoints(): void {\r\n    const { breakpoints } = this.options;\r\n\r\n    this.breakpoints.push( [ 'default', this.options ] );\r\n\r\n    if ( breakpoints ) {\r\n      forOwn( breakpoints, ( options, width ) => {\r\n        this.breakpoints.push( [ width, merge( merge( {}, this.options ), options ) ] );\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide width is fixed or not.\r\n   *\r\n   * @return `true` if the slide width is fixed, or otherwise `false`.\r\n   */\r\n  private isFixedWidth( options: Options ): boolean {\r\n    return !! options[ this.Direction.resolve( 'fixedWidth' ) ];\r\n  }\r\n\r\n  /**\r\n   * Checks if the slider type is loop or not.\r\n   *\r\n   * @return `true` if the slider type is loop, or otherwise `false`.\r\n   */\r\n  private isLoop(): boolean {\r\n    return this.options.type === LOOP;\r\n  }\r\n\r\n  /**\r\n   * Checks if the active slide should be centered or not.\r\n   *\r\n   * @return `true` if the slide should be centered, or otherwise `false`.\r\n   */\r\n  private isCenter( options: Options ): boolean {\r\n    if( options.focus === 'center' ) {\r\n      if ( this.isLoop() ) {\r\n        return true;\r\n      }\r\n\r\n      if ( this.options.type === SLIDE ) {\r\n        return ! this.options.trimSpace;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks if the direction is TTB or not.\r\n   *\r\n   * @return `true` if the direction is TTB, or otherwise `false`.\r\n   */\r\n  private isVertical(): boolean {\r\n    return this.options.direction === TTB;\r\n  }\r\n\r\n  /**\r\n   * Builds classes of the root element.\r\n   *\r\n   * @return Classes for the root element as a single string.\r\n   */\r\n  private buildClasses(): string {\r\n    const { options } = this;\r\n\r\n    return [\r\n      CLASS_ROOT,\r\n      `${ CLASS_ROOT }--${ options.type }`,\r\n      `${ CLASS_ROOT }--${ options.direction }`,\r\n      options.drag && `${ CLASS_ROOT }--draggable`,\r\n      options.isNavigation && `${ CLASS_ROOT }--nav`,\r\n      CLASS_ACTIVE,\r\n      ! this.config.hidden && CLASS_RENDERED,\r\n    ].filter( Boolean ).join( ' ' );\r\n  }\r\n\r\n  /**\r\n   * Converts provided attributes into a single string.\r\n   *\r\n   * @param attrs - An object with attributes.\r\n   *\r\n   * @return A built string.\r\n   */\r\n  private buildAttrs( attrs: Record<string, string | number | boolean> ): string {\r\n    let attr = '';\r\n\r\n    forOwn( attrs, ( value, key ) => {\r\n      attr += value ? ` ${ camelToKebab( key ) }=\"${ value }\"` : '';\r\n    } );\r\n\r\n    return attr.trim();\r\n  }\r\n\r\n  /**\r\n   * Converts provided styles into a single string.\r\n   *\r\n   * @param styles - An object with styles.\r\n   *\r\n   * @return A built string.\r\n   */\r\n  private buildStyles( styles: Record<string, string | number> ): string {\r\n    let style = '';\r\n\r\n    forOwn( styles, ( value, key ) => {\r\n      style += ` ${ camelToKebab( key ) }:${ value };`;\r\n    } );\r\n\r\n    return style.trim();\r\n  }\r\n\r\n  /**\r\n   * Generates HTML of slides with inserting provided contents.\r\n   *\r\n   * @return The HTML for all slides and clones.\r\n   */\r\n  private renderSlides(): string {\r\n    const { slideTag: tag } = this.config;\r\n\r\n    return this.slides.map( content => {\r\n      return `<${ tag } ${ this.buildAttrs( content.attrs ) }>${ content.html || '' }</${ tag }>`;\r\n    } ).join( '' );\r\n  }\r\n\r\n  /**\r\n   * Add the `background` style for the cover mode.\r\n   *\r\n   * @param content - A slide content.\r\n   */\r\n  private cover( content: SlideContent ): void {\r\n    const { styles, html = '' } = content;\r\n\r\n    if ( this.options.cover && ! this.options.lazyLoad ) {\r\n      const src = html.match( /<img.*?src\\s*=\\s*(['\"])(.+?)\\1.*?>/ );\r\n\r\n      if ( src && src[ 2 ] ) {\r\n        styles.background = `center/cover no-repeat url('${ src[ 2 ] }')`;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates clones.\r\n   *\r\n   * @param contents - An array with SlideContent objects.\r\n   */\r\n  private generateClones( contents: SlideContent[] ): void {\r\n    const { classes } = this.options;\r\n    const count  = this.getCloneCount();\r\n    const slides = contents.slice();\r\n\r\n    while ( slides.length < count ) {\r\n      push( slides, slides );\r\n    }\r\n\r\n    push( slides.slice( -count ).reverse(), slides.slice( 0, count ) ).forEach( ( content, index ) => {\r\n      const attrs = assign( {}, content.attrs, { class: `${ content.attrs.class } ${ classes.clone }` } );\r\n      const clone = assign( {}, content, { attrs } );\r\n      index < count ? contents.unshift( clone ) : contents.push( clone );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Returns the number of clones to generate.\r\n   *\r\n   * @return A number of clones.\r\n   */\r\n  private getCloneCount(): number {\r\n    if ( this.isLoop() ) {\r\n      const { options } = this;\r\n\r\n      if ( options.clones ) {\r\n        return options.clones;\r\n      }\r\n\r\n      const perPage = max( ...this.breakpoints.map( ( [ , options ] ) => options.perPage ) );\r\n      return perPage * ( ( options.flickMaxPages || 1 ) + 1 );\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Generates arrows and the wrapper element.\r\n   *\r\n   * @return The HTML for arrows.\r\n   */\r\n  private renderArrows(): string {\r\n    let html = '';\r\n\r\n    html += `<div class=\"${ this.options.classes.arrows }\">`;\r\n    html += this.renderArrow( true );\r\n    html += this.renderArrow( false );\r\n    html += `</div>`;\r\n\r\n    return html;\r\n  }\r\n\r\n  /**\r\n   * Generates an arrow HTML.\r\n   * Some attributes are temporary, and Splide changes them after mount.\r\n   *\r\n   * @param prev - Options for each breakpoint.\r\n   *\r\n   * @return The HTML for the prev or next arrow.\r\n   */\r\n  private renderArrow( prev: boolean ): string {\r\n    const { classes, i18n } = this.options;\r\n    const attrs = {\r\n      class    : `${ classes.arrow } ${ prev ? classes.prev : classes.next }`,\r\n      type     : 'button',\r\n      ariaLabel: prev ? i18n.prev : i18n.next,\r\n    };\r\n\r\n    return `<button ${ this.buildAttrs( attrs ) }>`\r\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\">`\r\n      + `<path d=\"${ this.options.arrowPath || PATH }\" />`\r\n      + `</svg>`\r\n      + `</button>`;\r\n  }\r\n\r\n  /**\r\n   * Returns the HTML of the slider.\r\n   *\r\n   * @return The generated HTML.\r\n   */\r\n  html(): string {\r\n    const { rootClass, listTag, arrows, beforeTrack, afterTrack, slider, beforeSlider, afterSlider } = this.config;\r\n\r\n    let html = '';\r\n\r\n    html += `<div id=\"${ this.id }\" class=\"${ this.buildClasses() } ${ rootClass || '' }\">`;\r\n    html += `<style>${ this.Style.build() }</style>`;\r\n\r\n    if ( slider ) {\r\n      html += beforeSlider || '';\r\n      html += `<div class=\"splide__slider\">`;\r\n    }\r\n\r\n    html += beforeTrack || '';\r\n\r\n    if ( arrows ) {\r\n      html += this.renderArrows();\r\n    }\r\n\r\n    html += `<div class=\"splide__track\">`;\r\n    html += `<${ listTag } class=\"splide__list\">`;\r\n\r\n    html += this.renderSlides();\r\n\r\n    html += `</${ listTag }>`;\r\n    html += `</div>`; // .track\r\n\r\n    html += afterTrack || '';\r\n\r\n    if ( slider ) {\r\n      html += `</div>`;\r\n      html += afterSlider || '';\r\n    }\r\n\r\n    html += `</div>`; // .splide\r\n\r\n    return html;\r\n  }\r\n}\r\n","/**\r\n * Pads the number with 0.\r\n *\r\n * @param number - A number to pad.\r\n *\r\n * @return string - Padded number.\r\n */\r\nexport function pad( number: number ): string {\r\n  return number < 10 ? `0${ number }` : `${ number }`;\r\n}\r\n","import { slice } from '../../arrayLike';\r\n\r\n\r\n/**\r\n * Returns elements that match the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return An array with matched elements.\r\n */\r\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector?: string ): E[] {\r\n  return selector ? slice<E>( parent.querySelectorAll( selector ) ) : [];\r\n}\r\n","/**\r\n * The type for the regular slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SLIDE = 'slide';\r\n\r\n/**\r\n * The type for the carousel slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOOP = 'loop';\r\n\r\n/**\r\n * The type for the fade slider that can not have multiple slides in a page.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FADE = 'fade';\r\n","export const CLASS_RENDERED = 'is-rendered';\r\n","/**\r\n * The namespace for SVG elements.\r\n */\r\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\r\n\r\n/**\r\n * The arrow path.\r\n */\r\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\r\n\r\n/**\r\n * SVG width and height.\r\n */\r\nexport const SIZE = 40;\r\n"],"names":["RTL","TTB","ORIENTATION_MAP","width","left","right","x","X","Y","ArrowLeft","ARROW","ArrowRight","Direction","Splide2","Components2","options","resolve","prop","axisOnly","direction","index","replace","match","offset","replacement","toLowerCase","charAt","toUpperCase","slice","orient","value","PROJECT_CODE","CLASS_ROOT","CLASS_TRACK","CLASS_LIST","CLASS_SLIDE","CLASS_CLONE","CLASS_ARROW","CLASS_PAGINATION","CLASS_ACTIVE","DEFAULTS","type","role","speed","perPage","cloneStatus","arrows","pagination","paginationKeyboard","interval","pauseOnHover","pauseOnFocus","resetProgress","easing","drag","trimSpace","focusableNodes","live","classes","slide","clone","arrow","prev","next","page","spinner","i18n","first","last","slideX","pageX","play","pause","carousel","select","slideLabel","reducedMotion","rewindSpeed","autoplay","arrayLike","start","end","Array","prototype","call","apply","func","bind","arguments","typeOf","subject","isObject","isArray","isString","toArray","forEach","values","iteratee","push","array","items","matches","elm","selector","HTMLElement","child","parent","children2","children","filter","firstElementChild","ownKeys","Object","keys","forOwn","object","reverse","i","length","key","assign","source","merge","remove","nodes","node","parentNode","removeChild","unit","assert","condition","message","Error","Math","min","max","floor","ceil","abs","camelToKebab","string","ids","EventBinder","listeners","forEachEvent","targets","events","target","events2","split","eventNS","fragment","callback","event","namespace","isEventTarget","remover","removeEventListener","addEventListener","unbind","listener","dispatch","detail","e","CustomEvent","bubbles","document","createEvent","initCustomEvent","dispatchEvent","destroy","data","EventInterface","bus","createDocumentFragment","binder","on","join","off","emit","RENDERER_DEFAULT_CONFIG","listTag","slideTag","Style","id","styles","rule","breakpoint","selectors","this","build","css","default","buildSelectors","sort","n","m","_this","mediaQuery","_this2","trim","contents","config","defaults","slides","breakpoints","prefix","number","init","clean","splide","root","clones","querySelectorAll","parseBreakpoints","initSlides","registerRootStyles","registerTrackStyles","registerSlideStyles","registerListStyles","map","content","html","attrs","_this3","cover","class","style","buildStyles","isLoop","generateClones","_this4","Style2","_this5","cssPadding","cssTrackHeight","_this6","buildTranslate","cssSlideHeight","cssAspectRatio","_this7","cssSlideWidth","gap","cssOffsetClones","cssOffsetGaps","isCenter","buildCssValue","cssOffsetCenter","Boolean","cloneCount","getCloneCount","isFixedWidth","parseCssValue","unit2","padding","height","isVertical","cssHeight","autoWidth","fixedWidth","cssSlideSize","fixedHeight","autoHeight","heightRatio","parseFloat","_this8","focus","buildClasses","isNavigation","hidden","buildAttrs","attr","renderSlides","tag","_this9","lazyLoad","src","background","count","unshift","flickMaxPages","renderArrows","renderArrow","ariaLabel","arrowPath","rootClass","beforeTrack","afterTrack","slider","beforeSlider","afterSlider"],"mappings":"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"}